#!/bin/sh
BINDIR=${BINDIR:-"$HOME/.local/bin"}
mkdir -p "$BINDIR"
printf '%s\n' '' | base64 --decode > "$BINDIR/kubefs.sh"
chmod +x "$BINDIR/kubefs.sh"
printf '%s\n' 'IyEvYmluL3NoCiMgaGF2aW5nIGAua3ViZWxvZ2luYCBhbmQgYC5rdWJlY29uZmlnYCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgaXMgYSBnb29kIHByYWN0aWNlLiBCdXQgbm90IHJlcXVpcmVkIGJ5IGt1YmVmcy4KCkVNUFRZX0tVQkVDT05GSUc9J2FwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZwpjbHVzdGVyczogW10KY29udGV4dHM6IFtdCmN1cnJlbnQtY29udGV4dDogIiIKdXNlcnM6IFtdJwoKU1BBVEg9JChDRFBBVEg9IGNkIC0tICIkKGRpcm5hbWUgLS0gIiQwIikiICYmIHB3ZCkKIyBjaGVjayBpZiAua3ViZWNvbmZpZyBleGlzdCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMga3ViZWxvZ2luX2luaXQgaXMgY2FsbGVkL3NvdXJjZWQKaWYgISB0ZXN0IC1mICIke1NQQVRIfS8ua3ViZWNvbmZpZyI7IHRoZW4KICBwcmludGYgJyVzXG4nICIkRU1QVFlfS1VCRUNPTkZJRyIgPiAiJHtTUEFUSH0vLmt1YmVjb25maWciCiAgY2htb2QgNjAwICIke1NQQVRIfS8ua3ViZWNvbmZpZyIKZmkKZXhwb3J0IEtVQkVDT05GSUc9IiR7U1BBVEh9Ly5rdWJlY29uZmlnIgoKa3ViZWN0bCBhdXRoIGNhbi1pIC0tbGlzdCA+L2Rldi9udWxsIDI+JjEgXAomJiBLVUJFX0FVVEhFTlRJQ0FURUQ9dHJ1ZSBcCnx8IHVuc2V0IEtVQkVfQVVUSEVOVElDQVRFRAo=' | base64 --decode > "$BINDIR/kubeauth_init"
chmod +x "$BINDIR/kubeauth_init"
