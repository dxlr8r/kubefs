#!/bin/sh
# https://github.com/dxlr8r/kubefs
if test ${UID:--1} -eq 0; then
  : ${KUBEFS_LIBEXEC_DIR:="/usr/libexec/kubefs"}
  : ${KUBEFS_PROFILE_DIR:="/etc/profile.d"}
else
  : ${KUBEFS_LIBEXEC_DIR:="$HOME/.local/libexec/kubefs"}
  : ${KUBEFS_PROFILE_DIR:="$HOME/.local/profile.d"}
fi
mkdir -p "$KUBEFS_LIBEXEC_DIR" "$KUBEFS_PROFILE_DIR"
printf '%s\n' '' | base64 --decode > "$KUBEFS_PROFILE_DIR/kubefs.sh"
printf '%s\n' 'IyEvYmluL3NoCiMgaHR0cHM6Ly9naXRodWIuY29tL2R4bHI4ci9rdWJlZnMKCmlmICIke0tVQkVGU19CQVNFX0FERE9OUzotdHJ1ZX0iID0gJ3RydWUnOyB0aGVuCl9rdWJlZnNfa3ViZWN0bF9hbGlhc19jb21wbGV0ZSgpIHsKICAjIHNraXAgaWYgcmVxdWVzdGVkCiAgdGVzdCAiJHtLVUJFRlNfQ09NUExFVElPTjotdHJ1ZX0iID0gJ3RydWUnIHx8IHJldHVybiAwCiAgIyBub3QgZXhlY3V0ZWQgYXMgYSBzdWJzaGVsbCwgcHJlZml4ZWQgdG8gYSBwaXBlLCBldGMuCiAgdGVzdCAtdCAxIHx8IHJldHVybiAwCiAgIyBiYXNoIGNvbXBsZXRpb24gbm90IHNldHVwCiAgY29tbWFuZCAtdiBfZ2V0X2NvbXBfd29yZHNfYnlfcmVmID4vZGV2L251bGwgMj4mMSB8fCByZXR1cm4gMAogICMga3ViZWN0bCBjb21wbGV0aW9uIG5vdCBzb3VyY2VkCiAgY29tbWFuZCAtdiBfX3N0YXJ0X2t1YmVjdGwgPi9kZXYvbnVsbCAyPiYxIHx8IHJldHVybiAwCgogIGV2YWwgIiQocHJpbnRmICIKICBfa3ViZWN0bF9jb21wbGV0aW9uc18kMSgpIHsKICAgIGxvY2FsIGNvbXBsCiAgICBjb21wbD1cJHtDT01QX1dPUkRTW0BdOjF9CiAgICAoKCBDT01QX0NXT1JEICs9IDIgKSkKICAgIENPTVBfV09SRFM9KCBrdWJlY3RsICQyIFwiXCR7Y29tcGw6LSB9XCIgKQogICAgX19zdGFydF9rdWJlY3RsCiAgfQogIGNvbXBsZXRlIC1vIGRlZmF1bHQgLUYgX2t1YmVjdGxfY29tcGxldGlvbnNfJDEgJDEKICAiKSIKfQoKIyBnZXQgY3VycmVudCBjb250ZXh0IG9yIHNldApfa3ViZWZzX2t1YmVjdGxfYWxpYXNfY29tcGxldGUga3ggJ2NvbmZpZyB1c2UtY29udGV4dCcKa3goKSAoCiAgaWYgY29tbWFuZCAtdiBLdWJlRnMgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBleHBvcnQgS1VCRUNPTkZJRz0kKEt1YmVGcyBnZXQpCiAgZmkKCiAgIyBzd2l0Y2ggdG8gbmFtZWQgY29udGV4dAogIGlmIHRlc3QgIiQxIjsgdGhlbgogICAga3ViZWN0bCBjb25maWcgdXNlLWNvbnRleHQgIiQxIgogICMgSSBwcm9iYWJseSB3ZW50IG92ZXJib2FyZCBoZXJlIHRvIHJlZm9ybWF0IGBrdWJlY3RsIGNvbmZpZyBnZXQtY29udGV4dHNgCiAgZWxzZQogICAgX3JjdHg9JChrdWJlY3RsIGNvbmZpZyBnZXQtY29udGV4dHMpCiAgICBfaGVhZGVyPSQocHJpbnRmICclc1xuJyAiJF9yY3R4IiB8IGhlYWQgLW4xKQogICAgX21heF9sZW49JChwcmludGYgJyVzXG4nICIkX3JjdHgiIHwgYXdrICd7cHJpbnQgbGVuZ3RofScgfCBzb3J0IC1ybiB8IGhlYWQgLW4xKQogICAgX3NlcD0kJ1x0JwoKICAgICMgQ1VSUkVOVCBOQU1FIENMVVNURVIgQVVUSElORk8gTkFNRVNQQUNFCiAgICBfY29sdW1ucz0ke0tYX0NPTFVNTlM6LSdOQU1FLE5BTUVTUEFDRSxDTFVTVEVSLENVUlJFTlQnfQoKICAgICMgZmlsdGVyIGFuZCBmb3JtYXQgX3JjdHggdG8gX2NvbHVtbnMgdXNpbmcgX3NlcAogICAgX2N0eD0kKHByaW50ZiAnJXNcbicgIiRfcmN0eCIgXAogICAgfCBhd2sgLXYgU0VQPSIkX3NlcCIgLXYgQ09MVU1OUz0iJF9jb2x1bW5zIiBcCiAgICAtdiBIRUFEPSIkX2hlYWRlciIgLXYgTUFYTEVOPSIkX21heF9sZW4iIFwKICAgICdCRUdJTiB7CiAgICAgIHNwbGl0KENPTFVNTlMsIFRDT0wsICIsIikKICAgICAgVENPTF9MRU49MDsgZm9yKENPTCBpbiBUQ09MKXsgVENPTF9MRU4rKyB9CiAgICAgIEdBUD0zOwoKICAgICAgQ1VSUkVOVF9TVEFSVD0wOwogICAgICBDVVJSRU5UX0xFTj1pbmRleChIRUFELCAiTkFNRSIpLTE7CgogICAgICBOQU1FX1NUQVJUPUNVUlJFTlRfTEVOKzE7CiAgICAgIE5BTUVfTEVOPWluZGV4KEhFQUQsICJDTFVTVEVSIiktTkFNRV9TVEFSVDsKCiAgICAgIENMVVNURVJfU1RBUlQ9TkFNRV9TVEFSVCtOQU1FX0xFTgogICAgICBDTFVTVEVSX0xFTj1pbmRleChIRUFELCAiQVVUSElORk8iKS1DTFVTVEVSX1NUQVJUOwoKICAgICAgQVVUSElORk9fU1RBUlQ9Q0xVU1RFUl9TVEFSVCtDTFVTVEVSX0xFTgogICAgICBBVVRISU5GT19MRU49aW5kZXgoSEVBRCwgIk5BTUVTUEFDRSIpLUFVVEhJTkZPX1NUQVJUOwoKICAgICAgTkFNRVNQQUNFX1NUQVJUPUFVVEhJTkZPX1NUQVJUK0FVVEhJTkZPX0xFTgogICAgICBOQU1FU1BBQ0VfTEVOPU1BWExFTi1OQU1FU1BBQ0VfU1RBUlQ7CiAgICB9CiAgICB7CiAgICAgIERDT0xbIkNVUlJFTlQiXT1zdWJzdHIoJDAsIENVUlJFTlRfU1RBUlQsIENVUlJFTlRfTEVOLUdBUCk7CiAgICAgIERDT0xbIk5BTUUiXT1zdWJzdHIoJDAsIE5BTUVfU1RBUlQsIE5BTUVfTEVOLUdBUCk7CiAgICAgIERDT0xbIkNMVVNURVIiXT1zdWJzdHIoJDAsIENMVVNURVJfU1RBUlQsIENMVVNURVJfTEVOLUdBUCk7CiAgICAgIERDT0xbIkFVVEhJTkZPIl09c3Vic3RyKCQwLCBBVVRISU5GT19TVEFSVCwgQVVUSElORk9fTEVOLUdBUCk7CgogICAgICBfTkFNRVNQQUNFPXN1YnN0cigkMCwgTkFNRVNQQUNFX1NUQVJUKTsKICAgICAgZm9yIChpID0gMDsgaSA8PSAoTUFYTEVOLWxlbmd0aCgkMCktMSk7IGkrKykgeyBfTkFNRVNQQUNFPV9OQU1FU1BBQ0UgIiAiIH0KICAgICAgRENPTFsiTkFNRVNQQUNFIl09X05BTUVTUEFDRQoKICAgICAgZm9yKGk9MTsgaSA8PSBUQ09MX0xFTjsgaSsrKSB7CiAgICAgICAgcHJpbnRmICIlcyIsIERDT0xbVENPTFtpXV0KICAgICAgICBpZihpIDwgVENPTF9MRU4pIHsgcHJpbnRmICIlcyIsIFNFUCB9CiAgICAgIH0KICAgICAgcHJpbnRmICJcbiIKICAgIH0nKQoKICAgICMgZmluZCBjb2x1bW4gbnVtYmVyIHdoZXJlIENVUlJFTlQgaXMKICAgIF9jdXJyZW50X2NvbD0kKFwKICAgIHByaW50ZiAnJXMnICIkX2NvbHVtbnMiIFwKICAgIHwgdHIgLCAnXG4nXAogICAgfCBhd2sgJ3tpZigkMSA9PSAiQ1VSUkVOVCIpIHtwcmludCBOUn0gfScpCgogICAgIyBvbmx5IHByaW50IGhlYWRlciAobGluZSAxKSBpZiBub3QgcmVkaXJlY3Rpbmcgc3Rkb3V0CiAgICBpZiB0ZXN0IC10IDE7IHRoZW4KICAgICAgcHJpbnRmICclc1xuJyAiJF9jdHgiIHwgaGVhZCAtbjEKICAgIGZpCiAgICBwcmludGYgJyVzXG4nICIkX2N0eCIgXAogICAgfCBhd2sgJ3tpZihOUiA+IDEpIHtwcmludH19JyBcCiAgICB8IHNvcnQgLXQgIiRfc2VwIiAtayR7X2N1cnJlbnRfY29sfXIKICBmaQopCgojIGdldCBjdXJyZW50IG5hbWVzcGFjZSBvciBzZXQKX2t1YmVmc19rdWJlY3RsX2FsaWFzX2NvbXBsZXRlIGtuICdnZXQgbnMgLS1uby1oZWFkZXJzIC1vIGN1c3RvbS1jb2x1bW5zPSI6Lm1ldGFkYXRhLm5hbWUiJwprbigpICgKICBpZiBjb21tYW5kIC12IEt1YmVGcyA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIGV4cG9ydCBLVUJFQ09ORklHPSQoS3ViZUZzIGdldCkKICBmaQoKICBpZiB0ZXN0ICIkMSI7IHRoZW4KICAgIGt1YmVjdGwgY29uZmlnIHNldC1jb250ZXh0ICQxCiAgZWxzZQogICAgX2N1cnJlbnQ9JChrdWJlY3RsIGNvbmZpZyB2aWV3IC0tbWluaWZ5IC1vIGpzb25wYXRoPSJ7Li5uYW1lc3BhY2V9IikKICAgIF9hbGw9JChrdWJlY3RsIGdldCBucyAtbyBuYW1lIHwgY3V0IC1kLyAtZjIpCgogICAgX21heF9sZW49JChwcmludGYgJyVzXG4nICIkX2FsbCIgfCBhd2sgJ3twcmludCBsZW5ndGh9JyB8IHNvcnQgLXJuIHwgaGVhZCAtbjEpCiAgICBfc2VwPSQnXHQnCgogICAgX25zPSQocHJpbnRmICclc1xuJyAiJF9hbGwiIFwKICAgIHwgcHJpbnRmICclc1x0JXNcbiVzXG4nICdOQU1FJyAnQ1VSUkVOVCcgIiQoY2F0KSIgXAogICAgfCBhd2sgLXYgQ1VSUkVOVD0iJF9jdXJyZW50IiAtdiBTRVA9IiRfc2VwIiAtdiBNQVhMRU49IiRfbWF4X2xlbiIgJwogICAgewogICAgICBwcmludGYgIiVzIiwgJDEKICAgICAgZm9yKGkgPSAxOyBpIDw9IChNQVhMRU4tbGVuZ3RoKCQxKSk7IGkrKykgewogICAgICAgIHByaW50ZiAiICIKICAgICAgfQogICAgICBwcmludGYgIiVzIixTRVAKICAgICAgaWYoJDEgPT0gQ1VSUkVOVCkgeyBwcmludGYgIiVzIiwgIioiIH0KICAgICAgZWxzZSB7IHByaW50ZiAiJXMiLCAkMiB9CiAgICAgIHByaW50ZiAiXG4iCiAgICB9JykKCiAgICBpZiB0ZXN0IC10IDE7IHRoZW4KICAgICAgcHJpbnRmICclc1xuJyAiJF9ucyIgfCBoZWFkIC1uMQogICAgZmkKICAgIHByaW50ZiAiJXNcbiIgIiRfbnMiIFwKICAgIHwgYXdrICd7aWYoTlIgPiAxKSB7cHJpbnR9fScgXAogICAgfCBzb3J0IC10ICIkX3NlcCIgLWsycgogIGZpCikKCl9LdWJlRnNBZGRvbl9pbml0KCl7CnNoaWZ0CmNhc2UgIiQxIiBpbgphdXRoKSBzaGlmdDsgKAogIGlmIHRlc3QgLWUgIiR7MTotJChwd2QpfS8ua3ViZWF1dGgiOyB0aGVuCiAgICBwcmludGYgJ0VSUk9SOiBgJXNgIGFscmVhZHkgZXhpc3RzLlxuJyAiJHsxOi19Ly5rdWJlYXV0aCIgPiAvZGV2L3N0ZGVycgogICAgcmV0dXJuIDEKICBlbHNlCgoJY2F0IDw8LSAnRU9GJyA+ICIkezE6LSQocHdkKX0vLmt1YmVhdXRoIgoJIyEvYmluL3NoCglzZXQgLWUKCgkjIHNvdXJjZSBrdWJlYXV0aF9pbml0LnNoCgkuICRIT01FLy5sb2NhbC9saWJleGVjL2t1YmVmcy9rdWJlYXV0aC1pbml0LnNoIDI+L2Rldi9udWxsIHx8IFwKCS4gL3Vzci9saWJleGVjL2t1YmVmcy9rdWJlYXV0aC1pbml0LnNoCgoJIyBpZiBhbHJlYWR5IGF0aGVudGljYXRlZCwgZXhpdAoJdGVzdCAtbiAiJHtLVUJFX0FVVEhFTlRJQ0FURUQ6LX0iICYmIGV4aXQgfHwgOgoKCSMgbXlhdXRoX2NtZAoJRU9GCglmaQopCjs7CiopIHNoaWZ0CiAgS3ViZUZzIHByaW50Zi1zdGRlcnIgJ2FyZ3VtZW50IGAlc2Agbm90IHN1cHBvcnRlZFxuJyAiJDEiCjs7CmVzYWMKfQpmaQo=' | base64 --decode > "$KUBEFS_PROFILE_DIR/kubefs-addons.sh"
printf '%s\n' 'IyEvYmluL3NoCiMgaHR0cHM6Ly9naXRodWIuY29tL2R4bHI4ci9rdWJlZnMKIyBoYXZpbmcgYC5rdWJlYXV0aGAgYW5kIGAua3ViZWNvbmZpZ2AgaW4gdGhlIHNhbWUgZGlyZWN0b3J5IGlzIGEgZ29vZCBwcmFjdGljZS4gQnV0IG5vdCByZXF1aXJlZCBieSBrdWJlZnMuCgpFTVBUWV9LVUJFQ09ORklHPSdhcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWcKY2x1c3RlcnM6IFtdCmNvbnRleHRzOiBbXQpjdXJyZW50LWNvbnRleHQ6ICIiCnVzZXJzOiBbXScKClNQQVRIPSQoQ0RQQVRIPSBjZCAtLSAiJChkaXJuYW1lIC0tICIkMCIpIiAmJiBwd2QpCiMgY2hlY2sgaWYgLmt1YmVjb25maWcgZXhpc3QgaW4gdGhlIHNhbWUgZGlyZWN0b3J5IGFzIGt1YmVhdXRoLWluaXQgaXMgY2FsbGVkL3NvdXJjZWQKaWYgISB0ZXN0IC1mICIke1NQQVRIfS8ua3ViZWNvbmZpZyI7IHRoZW4KICBwcmludGYgJyVzXG4nICIkRU1QVFlfS1VCRUNPTkZJRyIgPiAiJHtTUEFUSH0vLmt1YmVjb25maWciCiAgY2htb2QgNjAwICIke1NQQVRIfS8ua3ViZWNvbmZpZyIKZmkKZXhwb3J0IEtVQkVDT05GSUc9IiR7U1BBVEh9Ly5rdWJlY29uZmlnIgoKdGltZW91dCAxIGt1YmVjdGwgdmVyc2lvbiA+L2Rldi9udWxsIDI+JjEgXAomJiBLVUJFX0FVVEhFTlRJQ0FURUQ9dHJ1ZSBcCnx8IHVuc2V0IEtVQkVfQVVUSEVOVElDQVRFRAo=' | base64 --decode > "$KUBEFS_LIBEXEC_DIR/kubeauth-init.sh"
